/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ShareholderRegistryMock,
  ShareholderRegistryMockInterface,
} from "../../../contracts/mocks/ShareholderRegistryMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "CONTRIBUTOR_STATUS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "INVESTOR_STATUS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MANAGING_BOARD_STATUS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SHAREHOLDER_STATUS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "balanceOfAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getStatus",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "getStatusAt",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "status",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isAtLeast",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "status",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "isAtLeastAt",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "status",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "mock_isAtLeast",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "snapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "totalSupplyAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610517806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063d4e30a4811610066578063d4e30a48146101bf578063ed76fff314610202578063efbc89bc1461020b578063fe4c7da81461021457600080fd5b806370a08231146101665780638129fc1c146101a75780639711715a1461015f578063981b24d0146101b157600080fd5b806330ccebb5116100d357806330ccebb5146101665780633397cc231461017a5780634b4b35f6146101905780634ee2cd7e1461017a57600080fd5b806306c1c03b146100fa5780630ea018f71461011657806318160ddd1461015f575b600080fd5b61010360045481565b6040519081526020015b60405180910390f35b61014f6101243660046103d6565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051901515815260200161010d565b6000610103565b610103610174366004610402565b50600090565b610103610188366004610424565b600092915050565b61014f61019e36600461044e565b60009392505050565b6101af61021d565b005b610103610174366004610483565b6101af6101cd36600461049c565b60009283526005602090815260408085206001600160a01b039490941685529290529120805460ff1916911515919091179055565b61010360015481565b61010360035481565b61010360025481565b600054610100900460ff161580801561023d5750600054600160ff909116105b806102575750303b158015610257575060005460ff166001145b6102be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156102e1576000805461ff0019166101001790555b7f307a5ff72e442b798b18d109baae15fe48b6d3690fd14c03015a2f47dd89e2f16001557f14480ae0991a8fe24c1733177e7d71ec79d1f142a7f0e5971a3b930e177598176002557f84d5b933b93417199db826f5da9d5b1189791cb2dfd61240824c7e46b055f03d6003557f1417f6a224499a6e3918f776fd5ff7d6d29c2d693d9862a904be8a74faad51f160045580156103b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b80356001600160a01b03811681146103d157600080fd5b919050565b600080604083850312156103e957600080fd5b823591506103f9602084016103ba565b90509250929050565b60006020828403121561041457600080fd5b61041d826103ba565b9392505050565b6000806040838503121561043757600080fd5b610440836103ba565b946020939093013593505050565b60008060006060848603121561046357600080fd5b83359250610473602085016103ba565b9150604084013590509250925092565b60006020828403121561049557600080fd5b5035919050565b6000806000606084860312156104b157600080fd5b833592506104c1602085016103ba565b9150604084013580151581146104d657600080fd5b80915050925092509256fea2646970667358221220b4273099f3317f4be901434f4dc95b239c93116b21190906f7426fa9570e414a64736f6c634300080f0033";

type ShareholderRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShareholderRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShareholderRegistryMock__factory extends ContractFactory {
  constructor(...args: ShareholderRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ShareholderRegistryMock> {
    return super.deploy(overrides || {}) as Promise<ShareholderRegistryMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ShareholderRegistryMock {
    return super.attach(address) as ShareholderRegistryMock;
  }
  override connect(signer: Signer): ShareholderRegistryMock__factory {
    return super.connect(signer) as ShareholderRegistryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShareholderRegistryMockInterface {
    return new utils.Interface(_abi) as ShareholderRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShareholderRegistryMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ShareholderRegistryMock;
  }
}
