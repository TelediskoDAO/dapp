/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TelediskoTokenMock,
  TelediskoTokenMockInterface,
} from "../../../contracts/mocks/TelediskoTokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balanceOfAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mockResult",
        type: "uint256",
      },
    ],
    name: "mock_balanceOfAt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "snapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610115806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80634ee2cd7e1460415780636f07c25614607a5780639711715a1460a3575b600080fd5b6068604c36600460a9565b506001600160a01b031660009081526020819052604090205490565b60405190815260200160405180910390f35b60a1608536600460a9565b6001600160a01b03909116600090815260208190526040902055565b005b60006068565b6000806040838503121560bb57600080fd5b82356001600160a01b038116811460d157600080fd5b94602093909301359350505056fea264697066735822122073eaa9db2b8e87a3be9604a4de30bbf507def6509e5992b31d1386e88b627efd64736f6c634300080b0033";

type TelediskoTokenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TelediskoTokenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TelediskoTokenMock__factory extends ContractFactory {
  constructor(...args: TelediskoTokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TelediskoTokenMock> {
    return super.deploy(overrides || {}) as Promise<TelediskoTokenMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TelediskoTokenMock {
    return super.attach(address) as TelediskoTokenMock;
  }
  override connect(signer: Signer): TelediskoTokenMock__factory {
    return super.connect(signer) as TelediskoTokenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TelediskoTokenMockInterface {
    return new utils.Interface(_abi) as TelediskoTokenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TelediskoTokenMock {
    return new Contract(address, _abi, signerOrProvider) as TelediskoTokenMock;
  }
}
