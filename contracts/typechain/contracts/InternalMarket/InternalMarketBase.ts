/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface InternalMarketBaseInterface extends utils.Interface {
  functions: {
    "daoToken()": FunctionFragment;
    "exchangeToken()": FunctionFragment;
    "offerDuration()": FunctionFragment;
    "offeredBalanceOf(address)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "redemptionController()": FunctionFragment;
    "reserve()": FunctionFragment;
    "withdrawableBalanceOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "daoToken"
      | "exchangeToken"
      | "offerDuration"
      | "offeredBalanceOf"
      | "priceOracle"
      | "redemptionController"
      | "reserve"
      | "withdrawableBalanceOf"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "daoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeredBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "daoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeredBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableBalanceOf",
    data: BytesLike
  ): Result;

  events: {
    "OfferCreated(uint128,address,uint256,uint256)": EventFragment;
    "OfferMatched(uint128,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferMatched"): EventFragment;
}

export interface OfferCreatedEventObject {
  id: BigNumber;
  from: string;
  amount: BigNumber;
  createdAt: BigNumber;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferMatchedEventObject {
  id: BigNumber;
  from: string;
  to: string;
  amount: BigNumber;
}
export type OfferMatchedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  OfferMatchedEventObject
>;

export type OfferMatchedEventFilter = TypedEventFilter<OfferMatchedEvent>;

export interface InternalMarketBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InternalMarketBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    daoToken(overrides?: CallOverrides): Promise<[string]>;

    exchangeToken(overrides?: CallOverrides): Promise<[string]>;

    offerDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeredBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    redemptionController(overrides?: CallOverrides): Promise<[string]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    withdrawableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  daoToken(overrides?: CallOverrides): Promise<string>;

  exchangeToken(overrides?: CallOverrides): Promise<string>;

  offerDuration(overrides?: CallOverrides): Promise<BigNumber>;

  offeredBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  redemptionController(overrides?: CallOverrides): Promise<string>;

  reserve(overrides?: CallOverrides): Promise<string>;

  withdrawableBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    daoToken(overrides?: CallOverrides): Promise<string>;

    exchangeToken(overrides?: CallOverrides): Promise<string>;

    offerDuration(overrides?: CallOverrides): Promise<BigNumber>;

    offeredBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    redemptionController(overrides?: CallOverrides): Promise<string>;

    reserve(overrides?: CallOverrides): Promise<string>;

    withdrawableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OfferCreated(uint128,address,uint256,uint256)"(
      id?: null,
      from?: null,
      amount?: null,
      createdAt?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      id?: null,
      from?: null,
      amount?: null,
      createdAt?: null
    ): OfferCreatedEventFilter;

    "OfferMatched(uint128,address,address,uint256)"(
      id?: null,
      from?: null,
      to?: null,
      amount?: null
    ): OfferMatchedEventFilter;
    OfferMatched(
      id?: null,
      from?: null,
      to?: null,
      amount?: null
    ): OfferMatchedEventFilter;
  };

  estimateGas: {
    daoToken(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeToken(overrides?: CallOverrides): Promise<BigNumber>;

    offerDuration(overrides?: CallOverrides): Promise<BigNumber>;

    offeredBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionController(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    daoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offerDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeredBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
