/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ShareholderRegistryMockInterface extends utils.Interface {
  functions: {
    "CONTRIBUTOR_STATUS()": FunctionFragment;
    "INVESTOR_STATUS()": FunctionFragment;
    "MANAGING_BOARD_STATUS()": FunctionFragment;
    "SHAREHOLDER_STATUS()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "getStatus(address)": FunctionFragment;
    "getStatusAt(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAtLeast(bytes32,address)": FunctionFragment;
    "isAtLeastAt(bytes32,address,uint256)": FunctionFragment;
    "mock_isAtLeast(bytes32,address,bool)": FunctionFragment;
    "snapshot()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTRIBUTOR_STATUS"
      | "INVESTOR_STATUS"
      | "MANAGING_BOARD_STATUS"
      | "SHAREHOLDER_STATUS"
      | "balanceOf"
      | "balanceOfAt"
      | "getStatus"
      | "getStatusAt"
      | "initialize"
      | "isAtLeast"
      | "isAtLeastAt"
      | "mock_isAtLeast"
      | "snapshot"
      | "totalSupply"
      | "totalSupplyAt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTRIBUTOR_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVESTOR_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGING_BOARD_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHAREHOLDER_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getStatusAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAtLeast",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAtLeastAt",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_isAtLeast",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "snapshot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRIBUTOR_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVESTOR_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGING_BOARD_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHAREHOLDER_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStatusAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAtLeast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAtLeastAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_isAtLeast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ShareholderRegistryMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShareholderRegistryMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRIBUTOR_STATUS(overrides?: CallOverrides): Promise<[string]>;

    INVESTOR_STATUS(overrides?: CallOverrides): Promise<[string]>;

    MANAGING_BOARD_STATUS(overrides?: CallOverrides): Promise<[string]>;

    SHAREHOLDER_STATUS(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatus(account: string, overrides?: CallOverrides): Promise<[string]>;

    getStatusAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAtLeast(
      status: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAtLeastAt(
      status: BytesLike,
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mock_isAtLeast(
      status: BytesLike,
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  CONTRIBUTOR_STATUS(overrides?: CallOverrides): Promise<string>;

  INVESTOR_STATUS(overrides?: CallOverrides): Promise<string>;

  MANAGING_BOARD_STATUS(overrides?: CallOverrides): Promise<string>;

  SHAREHOLDER_STATUS(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAt(
    account: string,
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatus(account: string, overrides?: CallOverrides): Promise<string>;

  getStatusAt(
    account: string,
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAtLeast(
    status: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAtLeastAt(
    status: BytesLike,
    account: string,
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mock_isAtLeast(
    status: BytesLike,
    account: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CONTRIBUTOR_STATUS(overrides?: CallOverrides): Promise<string>;

    INVESTOR_STATUS(overrides?: CallOverrides): Promise<string>;

    MANAGING_BOARD_STATUS(overrides?: CallOverrides): Promise<string>;

    SHAREHOLDER_STATUS(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(account: string, overrides?: CallOverrides): Promise<string>;

    getStatusAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAtLeast(
      status: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAtLeastAt(
      status: BytesLike,
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mock_isAtLeast(
      status: BytesLike,
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshot(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    CONTRIBUTOR_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    INVESTOR_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGING_BOARD_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    SHAREHOLDER_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStatusAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAtLeast(
      status: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAtLeastAt(
      status: BytesLike,
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_isAtLeast(
      status: BytesLike,
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRIBUTOR_STATUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INVESTOR_STATUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGING_BOARD_STATUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SHAREHOLDER_STATUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatusAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAtLeast(
      status: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAtLeastAt(
      status: BytesLike,
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_isAtLeast(
      status: BytesLike,
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
