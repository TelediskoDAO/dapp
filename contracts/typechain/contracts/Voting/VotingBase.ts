/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface VotingBaseInterface extends utils.Interface {
  functions: {
    "afterTokenTransfer(address,address,uint256)": FunctionFragment;
    "canVote(address)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "getDelegate(address)": FunctionFragment;
    "getTotalVotingPower()": FunctionFragment;
    "getVotingPower(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterTokenTransfer"
      | "canVote"
      | "delegate"
      | "getDelegate"
      | "getTotalVotingPower"
      | "getVotingPower"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterTokenTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "canVote", values: [string]): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(functionFragment: "getDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;

  events: {
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
}

export interface DelegateChangedEventObject {
  delegator: string;
  currentDelegate: string;
  newDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<
  [string, string, string],
  DelegateChangedEventObject
>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  account: string;
  oldVotingPower: BigNumber;
  newVotingPower: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedEventObject
>;

export type DelegateVotesChangedEventFilter =
  TypedEventFilter<DelegateVotesChangedEvent>;

export interface VotingBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canVote(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    delegate(
      newDelegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDelegate(account: string, overrides?: CallOverrides): Promise<[string]>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  afterTokenTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canVote(account: string, overrides?: CallOverrides): Promise<boolean>;

  delegate(
    newDelegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDelegate(account: string, overrides?: CallOverrides): Promise<string>;

  getTotalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

  getVotingPower(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    afterTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canVote(account: string, overrides?: CallOverrides): Promise<boolean>;

    delegate(newDelegate: string, overrides?: CallOverrides): Promise<void>;

    getDelegate(account: string, overrides?: CallOverrides): Promise<string>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DelegateChanged(address,address,address)"(
      delegator?: string | null,
      currentDelegate?: null,
      newDelegate?: null
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: string | null,
      currentDelegate?: null,
      newDelegate?: null
    ): DelegateChangedEventFilter;

    "DelegateVotesChanged(address,uint256,uint256)"(
      account?: string | null,
      oldVotingPower?: null,
      newVotingPower?: null
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      account?: string | null,
      oldVotingPower?: null,
      newVotingPower?: null
    ): DelegateVotesChangedEventFilter;
  };

  estimateGas: {
    afterTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canVote(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      newDelegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDelegate(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    afterTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canVote(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      newDelegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotingPower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
