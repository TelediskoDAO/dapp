/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ISnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISnapshot__factory>;
    getContractFactory(
      name: "Roles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Roles__factory>;
    getContractFactory(
      name: "Snapshottable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Snapshottable__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "NewTelediskoTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NewTelediskoTokenMock__factory>;
    getContractFactory(
      name: "ResolutionExecutorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolutionExecutorMock__factory>;
    getContractFactory(
      name: "ResolutionManagerV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolutionManagerV2Mock__factory>;
    getContractFactory(
      name: "ShareholderRegistryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShareholderRegistryMock__factory>;
    getContractFactory(
      name: "TelediskoTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TelediskoTokenMock__factory>;
    getContractFactory(
      name: "TelediskoTokenV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TelediskoTokenV2Mock__factory>;
    getContractFactory(
      name: "VotingMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingMock__factory>;
    getContractFactory(
      name: "IStdReference",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStdReference__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "ResolutionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolutionManager__factory>;
    getContractFactory(
      name: "IShareholderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShareholderRegistry__factory>;
    getContractFactory(
      name: "ShareholderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShareholderRegistry__factory>;
    getContractFactory(
      name: "ShareholderRegistryBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShareholderRegistryBase__factory>;
    getContractFactory(
      name: "ShareholderRegistrySnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShareholderRegistrySnapshot__factory>;
    getContractFactory(
      name: "ITelediskoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITelediskoToken__factory>;
    getContractFactory(
      name: "TelediskoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TelediskoToken__factory>;
    getContractFactory(
      name: "TelediskoTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TelediskoTokenBase__factory>;
    getContractFactory(
      name: "TelediskoTokenSnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TelediskoTokenSnapshot__factory>;
    getContractFactory(
      name: "IVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoting__factory>;
    getContractFactory(
      name: "Voting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voting__factory>;
    getContractFactory(
      name: "VotingBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingBase__factory>;
    getContractFactory(
      name: "VotingSnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingSnapshot__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ISnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISnapshot>;
    getContractAt(
      name: "Roles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Roles>;
    getContractAt(
      name: "Snapshottable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Snapshottable>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "NewTelediskoTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NewTelediskoTokenMock>;
    getContractAt(
      name: "ResolutionExecutorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolutionExecutorMock>;
    getContractAt(
      name: "ResolutionManagerV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolutionManagerV2Mock>;
    getContractAt(
      name: "ShareholderRegistryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShareholderRegistryMock>;
    getContractAt(
      name: "TelediskoTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TelediskoTokenMock>;
    getContractAt(
      name: "TelediskoTokenV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TelediskoTokenV2Mock>;
    getContractAt(
      name: "VotingMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingMock>;
    getContractAt(
      name: "IStdReference",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStdReference>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "ResolutionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolutionManager>;
    getContractAt(
      name: "IShareholderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IShareholderRegistry>;
    getContractAt(
      name: "ShareholderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShareholderRegistry>;
    getContractAt(
      name: "ShareholderRegistryBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShareholderRegistryBase>;
    getContractAt(
      name: "ShareholderRegistrySnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShareholderRegistrySnapshot>;
    getContractAt(
      name: "ITelediskoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITelediskoToken>;
    getContractAt(
      name: "TelediskoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TelediskoToken>;
    getContractAt(
      name: "TelediskoTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TelediskoTokenBase>;
    getContractAt(
      name: "TelediskoTokenSnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TelediskoTokenSnapshot>;
    getContractAt(
      name: "IVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoting>;
    getContractAt(
      name: "Voting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Voting>;
    getContractAt(
      name: "VotingBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingBase>;
    getContractAt(
      name: "VotingSnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingSnapshot>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
