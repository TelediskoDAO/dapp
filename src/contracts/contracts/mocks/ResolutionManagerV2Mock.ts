/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ResolutionManagerV2MockInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addResolutionType(string,uint256,uint256,uint256,bool)": FunctionFragment;
    "approveResolution(uint256)": FunctionFragment;
    "createResolution(string,uint256,bool,address[],bytes[])": FunctionFragment;
    "executeResolution(uint256)": FunctionFragment;
    "getExecutionDetails(uint256)": FunctionFragment;
    "getResolutionResult(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVoterVote(uint256,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "reinitialize()": FunctionFragment;
    "rejectResolution(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resolutionTypes(uint256)": FunctionFragment;
    "resolutions(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setShareholderRegistry(address)": FunctionFragment;
    "setTelediskoToken(address)": FunctionFragment;
    "setVoting(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateResolution(uint256,string,uint256,bool,address[],bytes[])": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "addResolutionType"
      | "approveResolution"
      | "createResolution"
      | "executeResolution"
      | "getExecutionDetails"
      | "getResolutionResult"
      | "getRoleAdmin"
      | "getVoterVote"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "reinitialize"
      | "rejectResolution"
      | "renounceRole"
      | "resolutionTypes"
      | "resolutions"
      | "revokeRole"
      | "setShareholderRegistry"
      | "setTelediskoToken"
      | "setVoting"
      | "supportsInterface"
      | "updateResolution"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addResolutionType",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveResolution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createResolution",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeResolution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getResolutionResult",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectResolution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolutionTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolutions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShareholderRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTelediskoToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateResolution",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addResolutionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResolutionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolutionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShareholderRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTelediskoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "DelegateLostVotingPower(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ResolutionApproved(address,uint256)": EventFragment;
    "ResolutionCreated(address,uint256)": EventFragment;
    "ResolutionExecuted(address,uint256)": EventFragment;
    "ResolutionRejected(address,uint256)": EventFragment;
    "ResolutionTypeCreated(address,uint256)": EventFragment;
    "ResolutionUpdated(address,uint256)": EventFragment;
    "ResolutionVoted(address,uint256,uint256,bool)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateLostVotingPower"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionTypeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface DelegateLostVotingPowerEventObject {
  from: string;
  resolutionId: BigNumber;
  amount: BigNumber;
}
export type DelegateLostVotingPowerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateLostVotingPowerEventObject
>;

export type DelegateLostVotingPowerEventFilter =
  TypedEventFilter<DelegateLostVotingPowerEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ResolutionApprovedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionApprovedEvent = TypedEvent<
  [string, BigNumber],
  ResolutionApprovedEventObject
>;

export type ResolutionApprovedEventFilter =
  TypedEventFilter<ResolutionApprovedEvent>;

export interface ResolutionCreatedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionCreatedEvent = TypedEvent<
  [string, BigNumber],
  ResolutionCreatedEventObject
>;

export type ResolutionCreatedEventFilter =
  TypedEventFilter<ResolutionCreatedEvent>;

export interface ResolutionExecutedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionExecutedEvent = TypedEvent<
  [string, BigNumber],
  ResolutionExecutedEventObject
>;

export type ResolutionExecutedEventFilter =
  TypedEventFilter<ResolutionExecutedEvent>;

export interface ResolutionRejectedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionRejectedEvent = TypedEvent<
  [string, BigNumber],
  ResolutionRejectedEventObject
>;

export type ResolutionRejectedEventFilter =
  TypedEventFilter<ResolutionRejectedEvent>;

export interface ResolutionTypeCreatedEventObject {
  from: string;
  typeIndex: BigNumber;
}
export type ResolutionTypeCreatedEvent = TypedEvent<
  [string, BigNumber],
  ResolutionTypeCreatedEventObject
>;

export type ResolutionTypeCreatedEventFilter =
  TypedEventFilter<ResolutionTypeCreatedEvent>;

export interface ResolutionUpdatedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ResolutionUpdatedEventObject
>;

export type ResolutionUpdatedEventFilter =
  TypedEventFilter<ResolutionUpdatedEvent>;

export interface ResolutionVotedEventObject {
  from: string;
  resolutionId: BigNumber;
  votingPower: BigNumber;
  isYes: boolean;
}
export type ResolutionVotedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  ResolutionVotedEventObject
>;

export type ResolutionVotedEventFilter = TypedEventFilter<ResolutionVotedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ResolutionManagerV2Mock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResolutionManagerV2MockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getResolutionResult(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isYes: boolean;
        hasVoted: boolean;
        votingPower: BigNumber;
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      shareholderRegistry: PromiseOrValue<string>,
      telediskoToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolutionTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        quorum: BigNumber;
        noticePeriod: BigNumber;
        votingPeriod: BigNumber;
        canBeNegative: boolean;
      }
    >;

    resolutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        dataURI: string;
        resolutionTypeId: BigNumber;
        approveTimestamp: BigNumber;
        snapshotId: BigNumber;
        yesVotesTotal: BigNumber;
        isNegative: boolean;
        rejectionTimestamp: BigNumber;
        executionTimestamp: BigNumber;
      }
    >;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTelediskoToken(
      telediskoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addResolutionType(
    name: PromiseOrValue<string>,
    quorum: PromiseOrValue<BigNumberish>,
    noticePeriod: PromiseOrValue<BigNumberish>,
    votingPeriod: PromiseOrValue<BigNumberish>,
    canBeNegative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createResolution(
    dataURI: PromiseOrValue<string>,
    resolutionTypeId: PromiseOrValue<BigNumberish>,
    isNegative: PromiseOrValue<boolean>,
    executionTo: PromiseOrValue<string>[],
    executionData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExecutionDetails(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getResolutionResult(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoterVote(
    resolutionId: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      isYes: boolean;
      hasVoted: boolean;
      votingPower: BigNumber;
    }
  >;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    shareholderRegistry: PromiseOrValue<string>,
    telediskoToken: PromiseOrValue<string>,
    voting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reinitialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolutionTypes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      quorum: BigNumber;
      noticePeriod: BigNumber;
      votingPeriod: BigNumber;
      canBeNegative: boolean;
    }
  >;

  resolutions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      dataURI: string;
      resolutionTypeId: BigNumber;
      approveTimestamp: BigNumber;
      snapshotId: BigNumber;
      yesVotesTotal: BigNumber;
      isNegative: boolean;
      rejectionTimestamp: BigNumber;
      executionTimestamp: BigNumber;
    }
  >;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShareholderRegistry(
    shareholderRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTelediskoToken(
    telediskoToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoting(
    voting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    dataURI: PromiseOrValue<string>,
    resolutionTypeId: PromiseOrValue<BigNumberish>,
    isNegative: PromiseOrValue<boolean>,
    executionTo: PromiseOrValue<string>[],
    executionData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    resolutionId: PromiseOrValue<BigNumberish>,
    isYes: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getResolutionResult(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isYes: boolean;
        hasVoted: boolean;
        votingPower: BigNumber;
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      shareholderRegistry: PromiseOrValue<string>,
      telediskoToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reinitialize(overrides?: CallOverrides): Promise<void>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolutionTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        quorum: BigNumber;
        noticePeriod: BigNumber;
        votingPeriod: BigNumber;
        canBeNegative: boolean;
      }
    >;

    resolutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        dataURI: string;
        resolutionTypeId: BigNumber;
        approveTimestamp: BigNumber;
        snapshotId: BigNumber;
        yesVotesTotal: BigNumber;
        isNegative: boolean;
        rejectionTimestamp: BigNumber;
        executionTimestamp: BigNumber;
      }
    >;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTelediskoToken(
      telediskoToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelegateLostVotingPower(address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DelegateLostVotingPowerEventFilter;
    DelegateLostVotingPower(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DelegateLostVotingPowerEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ResolutionApproved(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionApprovedEventFilter;
    ResolutionApproved(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionApprovedEventFilter;

    "ResolutionCreated(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionCreatedEventFilter;
    ResolutionCreated(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionCreatedEventFilter;

    "ResolutionExecuted(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionExecutedEventFilter;
    ResolutionExecuted(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionExecutedEventFilter;

    "ResolutionRejected(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionRejectedEventFilter;
    ResolutionRejected(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionRejectedEventFilter;

    "ResolutionTypeCreated(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      typeIndex?: PromiseOrValue<BigNumberish> | null
    ): ResolutionTypeCreatedEventFilter;
    ResolutionTypeCreated(
      from?: PromiseOrValue<string> | null,
      typeIndex?: PromiseOrValue<BigNumberish> | null
    ): ResolutionTypeCreatedEventFilter;

    "ResolutionUpdated(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionUpdatedEventFilter;
    ResolutionUpdated(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null
    ): ResolutionUpdatedEventFilter;

    "ResolutionVoted(address,uint256,uint256,bool)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      votingPower?: null,
      isYes?: null
    ): ResolutionVotedEventFilter;
    ResolutionVoted(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      votingPower?: null,
      isYes?: null
    ): ResolutionVotedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResolutionResult(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      shareholderRegistry: PromiseOrValue<string>,
      telediskoToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolutionTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTelediskoToken(
      telediskoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResolutionResult(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      shareholderRegistry: PromiseOrValue<string>,
      telediskoToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolutionTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTelediskoToken(
      telediskoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
