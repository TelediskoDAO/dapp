/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ResolutionExecutorMockInterface extends utils.Interface {
  functions: {
    "mockExecuteArray(uint256[])": FunctionFragment;
    "mockExecuteSimple(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "mockExecuteArray" | "mockExecuteSimple"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mockExecuteArray",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mockExecuteSimple",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "mockExecuteArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockExecuteSimple",
    data: BytesLike
  ): Result;

  events: {
    "MockExecutionArray(uint256[])": EventFragment;
    "MockExecutionSimple(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MockExecutionArray"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockExecutionSimple"): EventFragment;
}

export interface MockExecutionArrayEventObject {
  a: BigNumber[];
}
export type MockExecutionArrayEvent = TypedEvent<
  [BigNumber[]],
  MockExecutionArrayEventObject
>;

export type MockExecutionArrayEventFilter =
  TypedEventFilter<MockExecutionArrayEvent>;

export interface MockExecutionSimpleEventObject {
  a: BigNumber;
}
export type MockExecutionSimpleEvent = TypedEvent<
  [BigNumber],
  MockExecutionSimpleEventObject
>;

export type MockExecutionSimpleEventFilter =
  TypedEventFilter<MockExecutionSimpleEvent>;

export interface ResolutionExecutorMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResolutionExecutorMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mockExecuteArray(
      a: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockExecuteSimple(
      a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  mockExecuteArray(
    a: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockExecuteSimple(
    a: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mockExecuteArray(
      a: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mockExecuteSimple(
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MockExecutionArray(uint256[])"(a?: null): MockExecutionArrayEventFilter;
    MockExecutionArray(a?: null): MockExecutionArrayEventFilter;

    "MockExecutionSimple(uint256)"(a?: null): MockExecutionSimpleEventFilter;
    MockExecutionSimple(a?: null): MockExecutionSimpleEventFilter;
  };

  estimateGas: {
    mockExecuteArray(
      a: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockExecuteSimple(
      a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mockExecuteArray(
      a: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockExecuteSimple(
      a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
