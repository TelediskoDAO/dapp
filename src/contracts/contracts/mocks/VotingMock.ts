/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VotingMockInterface extends utils.Interface {
  functions: {
    "afterAddContributor(address)": FunctionFragment;
    "afterTokenTransfer(address,address,uint256)": FunctionFragment;
    "beforeRemoveContributor(address)": FunctionFragment;
    "canVoteAt(address,uint256)": FunctionFragment;
    "getDelegateAt(address,uint256)": FunctionFragment;
    "getTotalVotingPowerAt(uint256)": FunctionFragment;
    "getVotingPowerAt(address,uint256)": FunctionFragment;
    "mock_canVoteAt(address,bool)": FunctionFragment;
    "mock_getDelegateAt(address,address)": FunctionFragment;
    "mock_getTotalVotingPowerAt(uint256)": FunctionFragment;
    "mock_getVotingPowerAt(address,uint256)": FunctionFragment;
    "snapshot()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterAddContributor"
      | "afterTokenTransfer"
      | "beforeRemoveContributor"
      | "canVoteAt"
      | "getDelegateAt"
      | "getTotalVotingPowerAt"
      | "getVotingPowerAt"
      | "mock_canVoteAt"
      | "mock_getDelegateAt"
      | "mock_getTotalVotingPowerAt"
      | "mock_getVotingPowerAt"
      | "snapshot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterAddContributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "afterTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveContributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canVoteAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotingPowerAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_canVoteAt",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getDelegateAt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getTotalVotingPowerAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getVotingPowerAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "snapshot", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "afterAddContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVoteAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_canVoteAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getDelegateAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getTotalVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;

  events: {
    "AfterAddContributor(address)": EventFragment;
    "AfterTokenTransferCalled(address,address,uint256)": EventFragment;
    "BeforeRemoveContributor(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AfterAddContributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterTokenTransferCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeforeRemoveContributor"): EventFragment;
}

export interface AfterAddContributorEventObject {
  account: string;
}
export type AfterAddContributorEvent = TypedEvent<
  [string],
  AfterAddContributorEventObject
>;

export type AfterAddContributorEventFilter =
  TypedEventFilter<AfterAddContributorEvent>;

export interface AfterTokenTransferCalledEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type AfterTokenTransferCalledEvent = TypedEvent<
  [string, string, BigNumber],
  AfterTokenTransferCalledEventObject
>;

export type AfterTokenTransferCalledEventFilter =
  TypedEventFilter<AfterTokenTransferCalledEvent>;

export interface BeforeRemoveContributorEventObject {
  account: string;
}
export type BeforeRemoveContributorEvent = TypedEvent<
  [string],
  BeforeRemoveContributorEventObject
>;

export type BeforeRemoveContributorEventFilter =
  TypedEventFilter<BeforeRemoveContributorEvent>;

export interface VotingMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canVoteAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTotalVotingPowerAt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_canVoteAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mock_getDelegateAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mock_getTotalVotingPowerAt(
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mock_getVotingPowerAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    snapshot(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  afterAddContributor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterTokenTransfer(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeRemoveContributor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canVoteAt(
    account: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDelegateAt(
    account: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalVotingPowerAt(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingPowerAt(
    account: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mock_canVoteAt(
    account: PromiseOrValue<string>,
    mockResult: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mock_getDelegateAt(
    account: PromiseOrValue<string>,
    mockResult: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mock_getTotalVotingPowerAt(
    mockResult: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mock_getVotingPowerAt(
    account: PromiseOrValue<string>,
    mockResult: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  snapshot(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    canVoteAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalVotingPowerAt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_canVoteAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_getDelegateAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_getTotalVotingPowerAt(
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_getVotingPowerAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AfterAddContributor(address)"(
      account?: null
    ): AfterAddContributorEventFilter;
    AfterAddContributor(account?: null): AfterAddContributorEventFilter;

    "AfterTokenTransferCalled(address,address,uint256)"(
      from?: null,
      to?: null,
      amount?: null
    ): AfterTokenTransferCalledEventFilter;
    AfterTokenTransferCalled(
      from?: null,
      to?: null,
      amount?: null
    ): AfterTokenTransferCalledEventFilter;

    "BeforeRemoveContributor(address)"(
      account?: null
    ): BeforeRemoveContributorEventFilter;
    BeforeRemoveContributor(account?: null): BeforeRemoveContributorEventFilter;
  };

  estimateGas: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canVoteAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotingPowerAt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_canVoteAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mock_getDelegateAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mock_getTotalVotingPowerAt(
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mock_getVotingPowerAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    snapshot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canVoteAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotingPowerAt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_canVoteAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mock_getDelegateAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mock_getTotalVotingPowerAt(
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mock_getVotingPowerAt(
      account: PromiseOrValue<string>,
      mockResult: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    snapshot(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
